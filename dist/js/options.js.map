{"mappings":"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","sources":["src/js/options-page/options.js"],"sourcesContent":["// Selectors for key elements\r\nconst geminiApiKeyInput = document.getElementById('gemini-api-key');\r\nconst textSummaryKeyInput = document.getElementById('text-summary-key');\r\nconst togglePromptSectionBtn = document.getElementById('toggle-prompt-section');\r\nconst promptConfigContent = document.getElementById('prompt-config-content');\r\nconst addWidgetBtn = document.getElementById('add-widget-btn');\r\nconst widgetContainer = document.getElementById('widget-container');\r\nconst updateBtn = document.getElementById('update-btn');\r\nconst setDefaultBtn = document.getElementById('set-default-btn');\r\nconst clearBtn = document.getElementById('clear-btn');\r\n\r\n// Load stored settings on page load\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  chrome.storage.sync.get(['geminiApiKey', 'textSummaryKey', 'widgets'], (data) => {\r\n    geminiApiKeyInput.value = data.geminiApiKey || '';\r\n    textSummaryKeyInput.value = data.textSummaryKey || '';\r\n    const widgets = data.widgets || [];\r\n    widgets.forEach(addWidgetToUI);\r\n  });\r\n});\r\n\r\n// Save settings when inputs change\r\ngeminiApiKeyInput.addEventListener('input', () => {\r\n  chrome.storage.sync.set({ geminiApiKey: geminiApiKeyInput.value });\r\n});\r\ntextSummaryKeyInput.addEventListener('input', () => {\r\n  chrome.storage.sync.set({ textSummaryKey: textSummaryKeyInput.value });\r\n});\r\n\r\n// Toggle prompt configuration visibility\r\ntogglePromptSectionBtn.addEventListener('click', () => {\r\n  promptConfigContent.classList.toggle('hidden');\r\n});\r\n\r\n// Add a new widget\r\naddWidgetBtn.addEventListener('click', () => {\r\n  const widgetData = { name: '', prompt: '' };\r\n  addWidgetToUI(widgetData, true);\r\n});\r\n\r\n// Button Actions\r\nupdateBtn.addEventListener('click', () => {\r\n  chrome.storage.sync.get(['geminiApiKey', 'textSummaryKey', 'widgets'], (data) => {\r\n    console.log('Current Settings:', data);\r\n    alert('Settings have been updated!');\r\n  });\r\n});\r\n\r\nsetDefaultBtn.addEventListener('click', () => {\r\n  const defaultSettings = {\r\n    geminiApiKey: '',\r\n    textSummaryKey: '',\r\n    widgets: [],\r\n  };\r\n  chrome.storage.sync.set(defaultSettings, () => {\r\n    geminiApiKeyInput.value = '';\r\n    textSummaryKeyInput.value = '';\r\n    widgetContainer.innerHTML = '';\r\n    alert('Default settings applied!');\r\n  });\r\n});\r\n\r\nclearBtn.addEventListener('click', () => {\r\n  chrome.storage.sync.clear(() => {\r\n    geminiApiKeyInput.value = '';\r\n    textSummaryKeyInput.value = '';\r\n    widgetContainer.innerHTML = '';\r\n    alert('All settings cleared!');\r\n  });\r\n});\r\n\r\n// Function to add a widget UI block\r\nfunction addWidgetToUI(widgetData, isNew = false) {\r\n  const widgetDiv = document.createElement('div');\r\n  widgetDiv.className = 'p-4 border border-gray-300 rounded-lg bg-gray-100';\r\n\r\n  // Name field\r\n  const nameLabel = document.createElement('label');\r\n  nameLabel.textContent = 'Name of the Widget';\r\n  nameLabel.className = 'block text-gray-600 mb-2';\r\n  const nameInput = document.createElement('input');\r\n  nameInput.type = 'text';\r\n  nameInput.value = widgetData.name;\r\n  nameInput.className =\r\n    'w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500';\r\n  nameInput.addEventListener('input', () => saveWidgets());\r\n\r\n  // Prompt field\r\n  const promptLabel = document.createElement('label');\r\n  promptLabel.textContent = 'Prompt';\r\n  promptLabel.className = 'block text-gray-600 mt-4';\r\n  const promptDescription = document.createElement('p');\r\n  promptDescription.textContent =\r\n    'You can include {userinput}, {sitedata}, {systemdata}, {chatdata} annotations to your prompt template';\r\n  promptDescription.className = 'text-gray-500 text-sm';\r\n  const promptTextarea = document.createElement('textarea');\r\n  promptTextarea.value = widgetData.prompt;\r\n  promptTextarea.className =\r\n    'w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500';\r\n  promptTextarea.addEventListener('input', () => saveWidgets());\r\n\r\n  // Append all elements to the widget div\r\n  widgetDiv.appendChild(nameLabel);\r\n  widgetDiv.appendChild(nameInput);\r\n  widgetDiv.appendChild(promptLabel);\r\n  widgetDiv.appendChild(promptDescription);\r\n  widgetDiv.appendChild(promptTextarea);\r\n\r\n  // Add widget to container\r\n  widgetContainer.appendChild(widgetDiv);\r\n\r\n  // Save widgets if itâ€™s a new one\r\n  if (isNew) saveWidgets();\r\n}\r\n\r\n// Save widgets to storage\r\nfunction saveWidgets() {\r\n  const widgets = Array.from(widgetContainer.children).map((widgetDiv) => {\r\n    const name = widgetDiv.querySelector('input').value;\r\n    const prompt = widgetDiv.querySelector('textarea').value;\r\n    return { name, prompt };\r\n  });\r\n  chrome.storage.sync.set({ widgets });\r\n}\r\n"],"names":[],"version":3,"file":"options.js.map"}